@page "/"
@using Product.Application.DTOs
@using WebClient.Application.DTOs.Product
@using WebClient.Application.Services
@inject IProductService ProductService
@inject IToastService ToastService
@inject ILogger<Products> Logger

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Products</PageTitle>

@if (products == null)
{
    <div class="container mt-4">
        <p><em>Loading products...</em></p>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Available Products</h1>
            <button class="btn btn-success" @onclick="OpenCreateModal">Create New Product</button>

        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Stock Quantity</th>
                        <th>Created Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (products.Any())
                    {
                        @foreach (var product in products)
                        {
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>@product.Description</td>
                                <td>$@product.Price.ToString("F2")</td>
                                <td>@product.StockQuantity</td>
                                <td>@product.CreatedDate.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-primary btn-sm me-1" @onclick="() => OpenEditModal(product)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteModal(product.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center">No products available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if (showEditModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editProduct" OnValidSubmit="HandleUpdateProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="editProduct.Name" />
                            <ValidationMessage For="@(() => editProduct.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="editProduct.Description" rows="3" />
                            <ValidationMessage For="@(() => editProduct.Description)" />
                        </div>
                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="editProduct.Price" />
                            <ValidationMessage For="@(() => editProduct.Price)" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this product? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDeleteProduct">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showCreateModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="createProduct" OnValidSubmit="HandleCreateProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="createName" class="form-label">Name *</label>
                            <InputText id="createName" class="form-control" @bind-Value="createProduct.Name" />
                            <ValidationMessage For="@(() => createProduct.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="createDescription" class="form-label">Description</label>
                            <InputTextArea id="createDescription" class="form-control" @bind-Value="createProduct.Description" rows="3" />
                            <ValidationMessage For="@(() => createProduct.Description)" />
                        </div>
                        <div class="mb-3">
                            <label for="createPrice" class="form-label">Price</label>
                            <InputNumber id="createPrice" class="form-control" @bind-Value="createProduct.Price" />
                            <ValidationMessage For="@(() => createProduct.Price)" />
                        </div>
                        <div class="mb-3">
                            <label for="createStock" class="form-label">Stock Quantity</label>
                            <InputNumber id="createStock" class="form-control" @bind-Value="createProduct.StockQuantity" />
                            <ValidationMessage For="@(() => createProduct.StockQuantity)" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseCreateModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Create Product</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<ProductResponseDto>? products;
    private UpdateProductRequestDto? editProduct;
    private CreateProductRequestDto createProduct = new() { Name = "" };
    private int editingProductId;
    private int deleteProductId;
    private bool showEditModal;
    private bool showDeleteModal;
    private bool showCreateModal;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        try
        {
            await LoadProducts();
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error loading products");
            Logger.LogError(ex, "Exception loading products");
            products = Enumerable.Empty<ProductResponseDto>();
        }
        StateHasChanged();
    }
}

    private async Task LoadProducts()
    {
        var result = await ProductService.GetAllProductsAsync();
        if (result.IsSuccess)
        {
            products = result.Value;
        }
        else
        {
            ToastService.ShowError("Error loading products");
            Logger.LogError("Failed to load products: {Errors}", string.Join(", ", result.Errors));
            products = Enumerable.Empty<ProductResponseDto>();
        }
    }

    private void OpenCreateModal()
    {
        createProduct = new CreateProductRequestDto { Name = "" };
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private async Task HandleCreateProduct()
    {
        var result = await ProductService.CreateProductAsync(createProduct);
        if (result.IsSuccess)
        {
            CloseCreateModal();
            await LoadProducts();
            StateHasChanged();
            ToastService.ShowSuccess("Product created");
            Logger.LogInformation("Product created successfully");
        }
        else
        {
            ToastService.ShowError("Failed to create product");
            Logger.LogError("Failed to create product: {Errors}", string.Join(", ", result.Errors));
        }
    }

    private void OpenEditModal(ProductResponseDto product)
    {
        editingProductId = product.Id;
        editProduct = new UpdateProductRequestDto
        {
            Name = product.Name,
            Description = product.Description,
            Price = product.Price
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editProduct = null;
    }

    private async Task HandleUpdateProduct()
    {
        if (editProduct == null) return;

        var result = await ProductService.UpdateProductAsync(editingProductId, editProduct);
        if (result.IsSuccess)
        {
            CloseEditModal();
            await LoadProducts();
            StateHasChanged();
            ToastService.ShowSuccess("Product updated successfully");
            Logger.LogInformation("Product updated successfully: {Id}", editingProductId);
        }
        else
        {
            ToastService.ShowError("Failed to update product");
            Logger.LogError("Failed to update product {Id}: {Errors}", editingProductId, string.Join(", ", result.Errors));
        }
    }

    private void OpenDeleteModal(int id)
    {
        deleteProductId = id;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task HandleDeleteProduct()
    {
        var result = await ProductService.DeleteProductAsync(deleteProductId);
        if (result.IsSuccess)
        {
            CloseDeleteModal();
            await LoadProducts();
            StateHasChanged();
            ToastService.ShowSuccess("Product deleted successfully");
            Logger.LogInformation("Product deleted successfully: {Id}", deleteProductId);
        }
        else
        {
            ToastService.ShowError("Failed to delete product");
            Logger.LogError("Failed to delete product {Id}: {Errors}", deleteProductId, string.Join(", ", result.Errors));
        }
    }
}
